{"version":3,"file":"jobcards.min.js","sources":["../../../../apps/csf_tz/csf_tz/public/js/jobcards/bus.js","../../../../apps/csf_tz/csf_tz/public/js/jobcards/Card.vue?rollup-plugin-vue=script.js","../../../../apps/csf_tz/csf_tz/public/js/jobcards/JobCards.vue?rollup-plugin-vue=script.js","../../../../apps/csf_tz/csf_tz/public/js/jobcards/jobcards.js"],"sourcesContent":["export const evntBus = new Vue();","//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { evntBus } from \"./bus\";\nexport default {\n  data: () => ({\n    Dialog: false,\n    cardData: \"\",\n    employees: \"\",\n    completed_qty: 0,\n    timer: {\n      hours: \"00\",\n      minutes: \"00\",\n      seconds: \"00\",\n      interval: \"\",\n    },\n  }),\n  watch: {\n    Dialog(value) {\n      if (value) {\n        this.get_employees();\n      } else {\n        clearInterval(this.timer.interval);\n      }\n    },\n  },\n  methods: {\n    close_dialog() {\n      this.Dialog = false;\n    },\n    start_job() {\n      let row = frappe.model.add_child(\n        this.cardData,\n        \"Job Card Time Log\",\n        \"time_logs\"\n      );\n      row.from_time = frappe.datetime.now_datetime();\n      row.name = \"\";\n      row.completed_qty = 0;\n      this.cardData.job_started = 1;\n      this.cardData.started_time = row.from_time;\n      this.cardData.status = \"Work In Progress\";\n      if (!frappe.flags.resume_job) {\n        this.cardData.current_time = 0;\n      }\n      this.set_timer();\n      this.save();\n    },\n    start_por() {\n      if (!this.cardData.employee) {\n        evntBus.$emit(\"show_messag\", \"Please set Employee\");\n      } else {\n        this.start_job();\n      }\n    },\n    resume_por() {\n      frappe.flags.resume_job = 1;\n      this.start_job();\n    },\n    pause_por() {\n      if (\n        this.cardData.for_quantity <\n        this.cardData.total_completed_qty + flt(this.completed_qty)\n      ) {\n        evntBus.$emit(\n          \"show_messag\",\n          \"The completed quantity cannot be greater than the required quantity\"\n        );\n        return;\n      }\n      frappe.flags.pause_job = 1;\n      this.cardData.status = \"On Hold\";\n      clearInterval(this.timer.interval);\n      this.complete_job();\n    },\n    get_employees() {\n      const vm = this;\n      let employees;\n      frappe.call({\n        method: \"csf_tz.csf_tz.page.jobcards.jobcards.get_employees\",\n        args: { company: this.cardData.company },\n        async: false,\n        callback: function (r) {\n          if (r.message) {\n            employees = r.message;\n          }\n        },\n      });\n      this.employees = employees;\n    },\n    customFilter(item, queryText, itemText) {\n      const searchText = queryText.toLowerCase();\n      const textOne = item.name.toLowerCase();\n      const textTwo = item.employee_name.toLowerCase();\n\n      return (\n        textOne.indexOf(searchText) > -1 || textTwo.indexOf(searchText) > -1\n      );\n    },\n    set_timer() {\n      if (this.cardData.status == \"Completed\") {\n        return;\n      }\n      const vm = this;\n      let currentIncrement = this.cardData.current_time || 0;\n      if (this.cardData.started_time || this.cardData.current_time) {\n        if (this.cardData.status == \"On Hold\") {\n          updateStopwatch(currentIncrement);\n          clearInterval(this.timer.interval);\n        } else {\n          currentIncrement += moment(frappe.datetime.now_datetime()).diff(\n            moment(this.cardData.started_time),\n            \"seconds\"\n          );\n          initialiseTimer();\n        }\n\n        function initialiseTimer() {\n          vm.timer.interval = setInterval(() => {\n            var current = setCurrentIncrement();\n            updateStopwatch(current);\n          }, 1000);\n        }\n\n        function updateStopwatch(increment) {\n          const hours = Math.floor(increment / 3600);\n          const minutes = Math.floor((increment - hours * 3600) / 60);\n          const seconds = increment - hours * 3600 - minutes * 60;\n\n          vm.timer.hours =\n            hours < 10 ? \"0\" + hours.toString() : hours.toString();\n          vm.timer.minutes =\n            minutes < 10 ? \"0\" + minutes.toString() : minutes.toString();\n          vm.timer.seconds =\n            seconds < 10 ? \"0\" + seconds.toString() : seconds.toString();\n        }\n\n        function setCurrentIncrement() {\n          currentIncrement += 1;\n          return currentIncrement;\n        }\n      }\n    },\n    complete_job(completed_time) {\n      const idx = this.cardData.time_logs.length - 1;\n      this.cardData.time_logs[idx].completed_qty = flt(this.completed_qty);\n      this.completed_qty = 0;\n      this.cardData.time_logs.forEach((d) => {\n        if (d.from_time && !d.to_time) {\n          d.to_time = completed_time || frappe.datetime.now_datetime();\n\n          if (frappe.flags.pause_job) {\n            let currentIncrement =\n              moment(d.to_time).diff(moment(d.from_time), \"seconds\") || 0;\n            this.cardData.current_time =\n              currentIncrement + (this.cardData.current_time || 0);\n          } else {\n            this.cardData.started_time = \"\";\n            this.cardData.job_started = 0;\n            this.cardData.current_time = 0;\n          }\n          this.save();\n        }\n      });\n    },\n    submit_dialog() {\n      this.cardData.status = \"Completed\";\n      this.save(\"Submit\");\n      this.close_dialog();\n    },\n    save(action = \"Save\") {\n      const vm = this;\n      const doc = { ...this.cardData };\n      delete doc[\"operation\"];\n      frappe.call({\n        method: \"csf_tz.csf_tz.page.jobcards.jobcards.save_doc\",\n        args: {\n          doc: doc,\n          action: action,\n        },\n        async: false,\n        callback: function (r) {\n          if (r.message) {\n            r.message.operation = vm.cardData.operation;\n            Object.assign(vm.cardData, r.message);\n          }\n        },\n      });\n    },\n  },\n  created: function () {\n    evntBus.$on(\"open_card\", (job_card) => {\n      this.Dialog = true;\n      this.cardData = job_card;\n      (this.timer = {\n        hours: \"00\",\n        minutes: \"00\",\n        seconds: \"00\",\n      }),\n        this.set_timer();\n    });\n  },\n};\n","//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { evntBus } from \"./bus\";\nimport Card from \"./Card.vue\";\n\nexport default {\n  data: function () {\n    return {\n      data: \"\",\n    };\n  },\n  components: {\n    Card,\n  },\n\n  methods: {\n    get_data() {\n      const vm = this;\n      frappe.call({\n        method: \"csf_tz.csf_tz.page.jobcards.jobcards.get_job_cards\",\n        args: {},\n        async: true,\n        callback: function (r) {\n          if (r.message) {\n            vm.data = r.message;\n          }\n        },\n      });\n    },\n    get_current(increment) {\n      const hours = Math.floor(increment / 3600);\n      const minutes = Math.floor((increment - hours * 3600) / 60);\n      const seconds = increment - hours * 3600 - minutes * 60;\n      return {\n      hours :\n        hours < 10 ? \"0\" + hours.toString() : hours.toString(),\n      minutes :\n        minutes < 10 ? \"0\" + minutes.toString() : minutes.toString(),\n      seconds :\n        seconds < 10 ? \"0\" + seconds.toString() : seconds.toString(),\n        }\n    },\n    open_card(item) {\n      evntBus.$emit(\"open_card\", item);\n    },\n    set_status_color(status) {\n      if (status == \"Open\") {\n        return \"status-Open\";\n      }\n      if (status == \"Work In Progress\") {\n        return \"status-Work\";\n      }\n      if (status == \"Material Transferred\") {\n        return \"status-Material\";\n      }\n      if (status == \"On Hold\") {\n        return \"status-Hold\";\n      }\n      if (status == \"Submitted\") {\n        return \"status-Submitted\";\n      }\n    },\n  },\n  created: function () {\n    this.get_data();\n    evntBus.$on(\"show_messag\", (msg) => {\n      frappe.msgprint(msg);\n    });\n  },\n};\n","import Job_Cards from './JobCards.vue';\n\nfrappe.provide('frappe.JobCards');\n\n\nfrappe.JobCards.job_cards = class {\n        constructor({ parent }) {\n                this.$parent = $(parent);\n                this.page = parent.page;\n                this.make_body();\n        }\n        make_body() {\n                this.$EL = this.$parent.find('.layout-main');\n                this.vue = new Vue({\n                        vuetify: new Vuetify(),\n                        el: this.$EL[0],\n                        data: {\n                        },\n                        render: h => h(Job_Cards),\n                });\n        }\n        setup_header() {\n\n        }\n};"],"names":["const","evntBus","Vue","data","Dialog","cardData","employees","completed_qty","timer","hours","minutes","seconds","interval","watch","value","this","get_employees","clearInterval","methods","close_dialog","start_job","let","row","frappe","model","add_child","from_time","datetime","now_datetime","name","job_started","started_time","status","flags","resume_job","current_time","set_timer","save","start_por","employee","$emit","resume_por","pause_por","for_quantity","total_completed_qty","flt","pause_job","complete_job","call","method","args","company","async","callback","r","message","customFilter","item","queryText","itemText","searchText","toLowerCase","textOne","textTwo","employee_name","indexOf","vm","currentIncrement","updateStopwatch","increment","Math","floor","toString","moment","diff","setInterval","current","completed_time","idx","time_logs","length","forEach","d","to_time","submit_dialog","action","doc","Object","operation","assign","created","$on","job_card","components","get_data","get_current","open_card","set_status_color","msg","msgprint","provide","JobCards","job_cards","[object Object]","ref","$parent","$","parent","page","make_body","$EL","find","vue","vuetify","Vuetify","el","render","h","Job_Cards"],"mappings":"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"}