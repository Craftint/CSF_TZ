{"version":3,"file":"jobcards.min.js","sources":["../../../../apps/csf_tz/csf_tz/public/js/jobcards/bus.js","../../../../apps/csf_tz/csf_tz/public/js/jobcards/Card.vue?rollup-plugin-vue=script.js","../../../../apps/csf_tz/csf_tz/public/js/jobcards/JobCards.vue?rollup-plugin-vue=script.js","../../../../apps/csf_tz/csf_tz/public/js/jobcards/jobcards.js"],"sourcesContent":["export const evntBus = new Vue();","//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { evntBus } from \"./bus\";\nexport default {\n  data: () => ({\n    Dialog: false,\n    cardData: \"\",\n    start: false,\n    employees: \"\",\n    timer: {\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n    },\n  }),\n  watch: {\n    Dialog(value) {\n      if (value) {\n        this.get_employees();\n      }\n    },\n  },\n  methods: {\n    close_dialog() {\n      this.Dialog = false;\n    },\n    start_por() {\n      if (!this.cardData.employee) {\n        evntBus.$emit(\"show_messag\", \"Please set Employee\");\n      } else {\n        this.start = true;\n        let row = frappe.model.add_child(\n          this.cardData,\n          \"Job Card Time Log\",\n          \"time_logs\"\n        );\n        row.from_time = frappe.datetime.now_datetime();\n        row.job_started = 1;\n        row.started_time = row.from_time;\n        row.status = \"Work In Progress\";\n        if (!frappe.flags.resume_job) {\n          this.cardData.current_time = 0;\n        }\n      }\n    },\n    pause_por() {\n      this.start = false;\n    },\n    get_employees() {\n      const vm = this;\n      let employees;\n      frappe.call({\n        method: \"csf_tz.csf_tz.page.jobcards.jobcards.get_employees\",\n        args: { company: this.cardData.company },\n        async: false,\n        callback: function (r) {\n          if (r.message) {\n            employees = r.message;\n          }\n        },\n      });\n      this.employees = employees;\n    },\n    customFilter(item, queryText, itemText) {\n      const searchText = queryText.toLowerCase();\n      const textOne = item.name.toLowerCase();\n      const textTwo = item.employee_name.toLowerCase();\n\n      return (\n        textOne.indexOf(searchText) > -1 || textTwo.indexOf(searchText) > -1\n      );\n    },\n    set_timer() {\n      const vm = this;\n      let currentIncrement = this.cardData.current_time || 0;\n      if (this.cardData.started_time || this.cardData.current_time) {\n        if (this.cardData.status == \"On Hold\") {\n          updateStopwatch(currentIncrement);\n          console.log(\"currentIncrement\",currentIncrement)\n        } else {\n          console.log(\"else\")\n          currentIncrement += moment(frappe.datetime.now_datetime()).diff(\n            moment(this.cardData.started_time),\n            \"seconds\"\n          );\n          console.log(\"diff\",currentIncrement)\n          initialiseTimer();\n        }\n\n        function initialiseTimer() {\n          const interval = setInterval(() => {\n            var current = setCurrentIncrement();\n            console.log(\"current\",current)\n            updateStopwatch(current);\n          }, 1000);\n        }\n\n        function updateStopwatch(increment) {\n          // console.log(increment)\n          var hours = Math.floor(increment / 3600);\n          var minutes = Math.floor((increment - hours * 3600) / 60);\n          var seconds = increment - hours * 3600 - minutes * 60;\n\n          vm.timer.hours =\n            hours < 10 ? \"0\" + hours.toString() : hours.toString();\n          vm.timer.minutes =\n            minutes < 10 ? \"0\" + minutes.toString() : minutes.toString();\n          vm.timer.seconds =\n            seconds < 10 ? \"0\" + seconds.toString() : seconds.toString();\n        }\n\n        function setCurrentIncrement() {\n          currentIncrement += 1;\n          return currentIncrement;\n        }\n      }\n    },\n  },\n  created: function () {\n    evntBus.$on(\"open_card\", (job_card) => {\n      this.Dialog = true;\n      this.cardData = job_card;\n      this.timer = {\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n    },\n      this.set_timer();\n    });\n  },\n};\n","//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { evntBus } from \"./bus\";\nimport Card from \"./Card.vue\";\n\nexport default {\n  data: function () {\n    return {\n      data: \"\",\n    };\n  },\n  components: {\n    Card,\n  },\n\n  methods: {\n    get_data() {\n      const vm = this;\n      frappe.call({\n        method: \"csf_tz.csf_tz.page.jobcards.jobcards.get_job_cards\",\n        args: {},\n        async: true,\n        callback: function (r) {\n          if (r.message) {\n            vm.data = r.message;\n          }\n        },\n      });\n    },\n    open_card(item) {\n      evntBus.$emit(\"open_card\", item);\n    },\n    set_status_color(status) {\n      if (status == \"Open\") {\n        return \"status-Open\";\n      }\n      if (status == \"Work In Progress\") {\n        return \"status-Work\";\n      }\n      if (status == \"Material Transferred\") {\n        return \"status-Material\";\n      }\n      if (status == \"On Hold\") {\n        return \"status-Hold\";\n      }\n      if (status == \"Submitted\") {\n        return \"status-Submitted\";\n      }\n    },\n  },\n  created: function () {\n    this.get_data();\n    evntBus.$on(\"show_messag\", (msg) => {\n      frappe.msgprint(msg);\n    });\n  },\n};\n","import Job_Cards from './JobCards.vue';\n\nfrappe.provide('frappe.JobCards');\n\n\nfrappe.JobCards.job_cards = class {\n        constructor({ parent }) {\n                this.$parent = $(parent);\n                this.page = parent.page;\n                this.make_body();\n        }\n        make_body() {\n                this.$EL = this.$parent.find('.layout-main');\n                this.vue = new Vue({\n                        vuetify: new Vuetify(),\n                        el: this.$EL[0],\n                        data: {\n                        },\n                        render: h => h(Job_Cards),\n                });\n        }\n        setup_header() {\n\n        }\n};"],"names":["const","evntBus","Vue","data","Dialog","cardData","start","employees","timer","hours","minutes","seconds","watch","value","this","get_employees","methods","close_dialog","start_por","employee","let","row","frappe","model","add_child","from_time","datetime","now_datetime","job_started","started_time","status","flags","resume_job","current_time","$emit","pause_por","call","method","args","company","async","callback","r","message","customFilter","item","queryText","itemText","searchText","toLowerCase","textOne","name","textTwo","employee_name","indexOf","set_timer","vm","currentIncrement","updateStopwatch","increment","Math","floor","toString","console","log","moment","diff","setInterval","current","created","$on","job_card","components","get_data","open_card","set_status_color","msg","msgprint","provide","JobCards","job_cards","[object Object]","ref","$parent","$","parent","page","make_body","$EL","find","vue","vuetify","Vuetify","el","render","h","Job_Cards"],"mappings":"yBAAOA,IAAMC,EAAU,IAAIC,MCmIZ,CACbC,uBACEC,QAAQ,EACRC,SAAU,GACVC,OAAO,EACPC,UAAW,GACXC,MAAO,CACLC,MAAO,EACPC,QAAS,EACTC,QAAS,KAGbC,MAAO,CACLR,gBAAOS,GACDA,GACFC,KAAKC,kBAIXC,QAAS,CACPC,wBACEH,KAAKV,QAAS,GAEhBc,qBACE,GAAKJ,KAAKT,SAASc,SAEZ,CACLL,KAAKR,OAAQ,EACbc,IAAIC,EAAMC,OAAOC,MAAMC,UACrBV,KAAKT,SACL,oBACA,aAEFgB,EAAII,UAAYH,OAAOI,SAASC,eAChCN,EAAIO,YAAc,EAClBP,EAAIQ,aAAeR,EAAII,UACvBJ,EAAIS,OAAS,mBACRR,OAAOS,MAAMC,aAChBlB,KAAKT,SAAS4B,aAAe,QAb/BhC,EAAQiC,MAAM,cAAe,wBAiBjCC,qBACErB,KAAKR,OAAQ,GAEfS,yBAEEK,IAAIb,EACJe,OAAOc,KAAK,CACVC,OAAQ,qDACRC,KAAM,CAAEC,QAASzB,KAAKT,SAASkC,SAC/BC,OAAO,EACPC,SAAU,SAAUC,GACdA,EAAEC,UACJpC,EAAYmC,EAAEC,YAIpB7B,KAAKP,UAAYA,GAEnBqC,sBAAaC,EAAMC,EAAWC,GAC5B/C,IAAMgD,EAAaF,EAAUG,cACvBC,EAAUL,EAAKM,KAAKF,cACpBG,EAAUP,EAAKQ,cAAcJ,cAEnC,OACEC,EAAQI,QAAQN,IAAe,GAAKI,EAAQE,QAAQN,IAAe,GAGvEO,qBACEvD,IAAMwD,EAAK1C,KACP2C,EAAmB3C,KAAKT,SAAS4B,cAAgB,EACrD,GAAInB,KAAKT,SAASwB,cAAgBf,KAAKT,SAAS4B,aAAc,CAsB5D,SAASyB,EAAgBC,GAEvB,IAAIlD,EAAQmD,KAAKC,MAAMF,EAAY,MAC/BjD,EAAUkD,KAAKC,OAAOF,EAAoB,KAARlD,GAAgB,IAClDE,EAAUgD,EAAoB,KAARlD,EAAyB,GAAVC,EAEzC8C,EAAGhD,MAAMC,MACPA,EAAQ,GAAK,IAAMA,EAAMqD,WAAarD,EAAMqD,WAC9CN,EAAGhD,MAAME,QACPA,EAAU,GAAK,IAAMA,EAAQoD,WAAapD,EAAQoD,WACpDN,EAAGhD,MAAMG,QACPA,EAAU,GAAK,IAAMA,EAAQmD,WAAanD,EAAQmD,WAhC1B,WAAxBhD,KAAKT,SAASyB,QAChB4B,EAAgBD,GAChBM,QAAQC,IAAI,mBAAmBP,KAE/BM,QAAQC,IAAI,QACZP,GAAoBQ,OAAO3C,OAAOI,SAASC,gBAAgBuC,KACzDD,OAAOnD,KAAKT,SAASwB,cACrB,WAEFkC,QAAQC,IAAI,OAAOP,GAKFU,uBACf,IAAIC,EAqBNX,GAAoB,EApBlBM,QAAQC,IAAI,UAAUI,GACtBV,EAAgBU,IACf,SAwBXC,QAAS,sBACPpE,EAAQqE,IAAI,qBAAcC,GACxBzD,EAAKV,QAAS,EACdU,EAAKT,SAAWkE,EAChBzD,EAAKN,MAAQ,CACbC,MAAO,EACPC,QAAS,EACTC,QAAS,GAETG,EAAKyC,kjHCtMI,CACbpD,KAAM,WACJ,MAAO,CACLA,KAAM,KAGVqE,WAAY,qtEAIZxD,QAAS,CACPyD,oBACEzE,IAAMwD,EAAK1C,KACXQ,OAAOc,KAAK,CACVC,OAAQ,qDACRC,KAAM,GACNE,OAAO,EACPC,SAAU,SAAUC,GACdA,EAAEC,UACJa,EAAGrD,KAAOuC,EAAEC,aAKpB+B,mBAAU7B,GACR5C,EAAQiC,MAAM,YAAaW,IAE7B8B,0BAAiB7C,GACf,MAAc,QAAVA,EACK,cAEK,oBAAVA,EACK,cAEK,wBAAVA,EACK,kBAEK,WAAVA,EACK,cAEK,aAAVA,EACK,wBADT,IAKJuC,QAAS,WACPvD,KAAK2D,WACLxE,EAAQqE,IAAI,uBAAgBM,GAC1BtD,OAAOuD,SAASD,6jOCvGtBtD,OAAOwD,QAAQ,mBAGfxD,OAAOyD,SAASC,UAAY,MACpBC,YAAYC,kBACJpE,KAAKqE,QAAUC,EAAEC,GACjBvE,KAAKwE,KAAOD,EAAOC,KACnBxE,KAAKyE,YAEbN,YACQnE,KAAK0E,IAAM1E,KAAKqE,QAAQM,KAAK,gBAC7B3E,KAAK4E,IAAM,IAAIxF,IAAI,CACXyF,QAAS,IAAIC,QACbC,GAAI/E,KAAK0E,IAAI,GACbrF,KAAM,GAEN2F,gBAAQC,UAAKA,EAAEC,MAG/Bf"}