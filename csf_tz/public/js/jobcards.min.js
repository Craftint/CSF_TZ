(function () {
  'use strict';

  var evntBus = new Vue();

  //
  var script = {
    data: function () { return ({
      Dialog: false,
      cardData: ""
    }); },
    watch: {},
    methods: {
      close_dialog: function close_dialog() {
        this.Dialog = false;
      },
      
    },
    created: function () {
      var this$1 = this;

      evntBus.$on("open_card", function (item) {
        this$1.Dialog = true;
        this$1.cardData = item;

      });
    },
  };

  /* script */
              var __vue_script__ = script;
              
  /* template */
  var __vue_render__ = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "v-row",
      { attrs: { justify: "center" } },
      [
        _c(
          "v-dialog",
          {
            attrs: { "max-width": "900px" },
            model: {
              value: _vm.Dialog,
              callback: function($$v) {
                _vm.Dialog = $$v;
              },
              expression: "Dialog"
            }
          },
          [
            _c(
              "v-card",
              [
                _c("v-card-title", [
                  _c("span", { staticClass: "headline indigo--text" }, [
                    _vm._v("Job Card")
                  ])
                ]),
                _vm._v(" "),
                _c(
                  "v-card-text",
                  { staticClass: "pa-0" },
                  [
                    _c(
                      "v-list-item",
                      { attrs: { "three-line": "" } },
                      [
                        _c(
                          "v-list-item-content",
                          [
                            _c("div", { staticClass: "overline mb-4" }, [
                              _vm._v(_vm._s(_vm.cardData.name))
                            ]),
                            _vm._v(" "),
                            _c(
                              "v-list-item-title",
                              { staticClass: "headline mb-1" },
                              [
                                _vm._v(
                                  "\n            " +
                                    _vm._s(_vm.cardData.operation) +
                                    "\n          "
                                )
                              ]
                            ),
                            _vm._v(" "),
                            _c("v-list-item-subtitle", [
                              _vm._v(
                                "\n            QTY: " +
                                  _vm._s(_vm.cardData.for_quantity) +
                                  "\n          "
                              )
                            ]),
                            _vm._v(" "),
                            _c("v-list-item-subtitle", [
                              _vm._v(
                                "\n            Production Item: " +
                                  _vm._s(_vm.cardData.production_item) +
                                  "\n          "
                              )
                            ]),
                            _vm._v(" "),
                            _c("v-list-item-subtitle", [
                              _vm._v(
                                "\n            Satus: " +
                                  _vm._s(_vm.cardData.status) +
                                  "\n          "
                              )
                            ])
                          ],
                          1
                        ),
                        _vm._v(" "),
                        _c("v-list-item-avatar", {
                          attrs: { tile: "", size: "80", color: "grey" }
                        })
                      ],
                      1
                    )
                  ],
                  1
                ),
                _vm._v(" "),
                _c(
                  "v-card-actions",
                  [
                    _c("v-spacer"),
                    _vm._v(" "),
                    _c(
                      "v-btn",
                      {
                        attrs: { color: "error", dark: "" },
                        on: { click: _vm.close_dialog }
                      },
                      [_vm._v("Close")]
                    )
                  ],
                  1
                )
              ],
              1
            )
          ],
          1
        )
      ],
      1
    )
  };
  var __vue_staticRenderFns__ = [];
  __vue_render__._withStripped = true;

    /* style */
    var __vue_inject_styles__ = undefined;
    /* scoped */
    var __vue_scope_id__ = undefined;
    /* module identifier */
    var __vue_module_identifier__ = undefined;
    /* functional template */
    var __vue_is_functional_template__ = false;
    /* component normalizer */
    function __vue_normalize__(
      template, style, script,
      scope, functional, moduleIdentifier,
      createInjector, createInjectorSSR
    ) {
      var component = (typeof script === 'function' ? script.options : script) || {};

      // For security concerns, we use only base name in production mode.
      component.__file = "/home/frappe/frappe-bench/apps/csf_tz/csf_tz/public/js/jobcards/Card.vue";

      if (!component.render) {
        component.render = template.render;
        component.staticRenderFns = template.staticRenderFns;
        component._compiled = true;

        if (functional) { component.functional = true; }
      }

      component._scopeId = scope;

      return component
    }
    /* style inject */
    
    /* style inject SSR */
    

    
    var Card = __vue_normalize__(
      { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
      __vue_inject_styles__,
      __vue_script__,
      __vue_scope_id__,
      __vue_is_functional_template__,
      __vue_module_identifier__,
      undefined,
      undefined
    );

  //

  var script$1 = {
    data: function () {
      return {
        data: "",
      };
    },
    components: {
      Card: Card,
    },

    methods: {
      get_data: function get_data() {
        var vm = this;
        frappe.call({
          method: "csf_tz.csf_tz.page.jobcards.jobcards.get_job_cards",
          args: {},
          async: true,
          callback: function (r) {
            if (r.message) {
              vm.data = r.message;
            }
          },
        });
      },
      open_card: function open_card(item) {
        evntBus.$emit("open_card",item);
      },
    },
    created: function () {
      this.get_data();
    },
  };

  /* script */
              var __vue_script__$1 = script$1;
              
  /* template */
  var __vue_render__$1 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("v-app", [
      _c(
        "div",
        { attrs: { fluid: "" } },
        [
          _c("H3", [_vm._v(" Working Job Cards")]),
          _vm._v(" "),
          _c("Card"),
          _vm._v(" "),
          _vm._l(_vm.data, function(item) {
            return _c(
              "div",
              { key: item.name },
              [
                _c(
                  "v-card",
                  { staticClass: "mb-4" },
                  [
                    _c(
                      "v-list-item",
                      { attrs: { "three-line": "" } },
                      [
                        _c(
                          "v-list-item-content",
                          [
                            _c("div", { staticClass: "overline mb-4" }, [
                              _vm._v(_vm._s(item.name))
                            ]),
                            _vm._v(" "),
                            _c(
                              "v-list-item-title",
                              { staticClass: "headline mb-1" },
                              [
                                _vm._v(
                                  "\n            " +
                                    _vm._s(item.operation) +
                                    "\n          "
                                )
                              ]
                            ),
                            _vm._v(" "),
                            _c("v-list-item-subtitle", [
                              _vm._v(
                                "\n            QTY: " +
                                  _vm._s(item.for_quantity) +
                                  "\n          "
                              )
                            ]),
                            _vm._v(" "),
                            _c("v-list-item-subtitle", [
                              _vm._v(
                                "\n            Production Item: " +
                                  _vm._s(item.production_item) +
                                  "\n          "
                              )
                            ]),
                            _vm._v(" "),
                            _c("v-list-item-subtitle", [
                              _vm._v(
                                "\n            Satus: " +
                                  _vm._s(item.status) +
                                  "\n          "
                              )
                            ])
                          ],
                          1
                        ),
                        _vm._v(" "),
                        _c("v-list-item-avatar", {
                          attrs: { tile: "", size: "80", color: "grey" }
                        })
                      ],
                      1
                    ),
                    _vm._v(" "),
                    _c(
                      "v-card-actions",
                      [
                        _c(
                          "v-btn",
                          {
                            attrs: { text: "", color: "primary" },
                            on: {
                              click: function($event) {
                                return _vm.open_card(item)
                              }
                            }
                          },
                          [_vm._v(" open ")]
                        )
                      ],
                      1
                    )
                  ],
                  1
                )
              ],
              1
            )
          })
        ],
        2
      )
    ])
  };
  var __vue_staticRenderFns__$1 = [];
  __vue_render__$1._withStripped = true;

    /* style */
    var __vue_inject_styles__$1 = function (inject) {
      if (!inject) { return }
      inject("data-v-5d48c9d3_0", { source: "\n.navbar-default {\n  height: 40px;\n}\ndiv.navbar .container {\n  padding-top: 2px;\n}\n", map: {"version":3,"sources":["/home/frappe/frappe-bench/apps/csf_tz/csf_tz/public/js/jobcards/JobCards.vue"],"names":[],"mappings":";AA2EA;EACA,YAAA;AACA;AACA;EACA,gBAAA;AACA","file":"JobCards.vue","sourcesContent":["<template>\n  <v-app>\n    <div fluid>\n    <H3> Working Job Cards</H3>\n    <Card></Card>\n    <div v-for=\"item in data\" :key=\"item.name\">\n      <v-card class=\"mb-4\">\n        <v-list-item three-line>\n          <v-list-item-content>\n            <div class=\"overline mb-4\">{{ item.name }}</div>\n            <v-list-item-title class=\"headline mb-1\">\n              {{ item.operation }}\n            </v-list-item-title>\n            <v-list-item-subtitle>\n              QTY: {{ item.for_quantity }}\n            </v-list-item-subtitle>\n            <v-list-item-subtitle>\n              Production Item: {{ item.production_item }}\n            </v-list-item-subtitle>\n            <v-list-item-subtitle>\n              Satus: {{ item.status }}\n            </v-list-item-subtitle>\n          </v-list-item-content>\n\n          <v-list-item-avatar tile size=\"80\" color=\"grey\"></v-list-item-avatar>\n        </v-list-item>\n\n        <v-card-actions>\n          <!-- <v-spacer></v-spacer> -->\n          <v-btn text color=\"primary\" @click=\"open_card(item)\"> open </v-btn>\n        </v-card-actions>\n      </v-card>\n    </div>\n    </div>\n  </v-app>\n</template>\n\n<script>\nimport { evntBus } from \"./bus\";\nimport Card from \"./Card.vue\";\n\nexport default {\n  data: function () {\n    return {\n      data: \"\",\n    };\n  },\n  components: {\n    Card,\n  },\n\n  methods: {\n    get_data() {\n      const vm = this;\n      frappe.call({\n        method: \"csf_tz.csf_tz.page.jobcards.jobcards.get_job_cards\",\n        args: {},\n        async: true,\n        callback: function (r) {\n          if (r.message) {\n            vm.data = r.message;\n          }\n        },\n      });\n    },\n    open_card(item) {\n      evntBus.$emit(\"open_card\",item);\n    },\n  },\n  created: function () {\n    this.get_data();\n  },\n};\n</script>\n<style>\n.navbar-default {\n  height: 40px;\n}\ndiv.navbar .container {\n  padding-top: 2px;\n}\n</style>"]}, media: undefined });

    };
    /* scoped */
    var __vue_scope_id__$1 = undefined;
    /* module identifier */
    var __vue_module_identifier__$1 = undefined;
    /* functional template */
    var __vue_is_functional_template__$1 = false;
    /* component normalizer */
    function __vue_normalize__$1(
      template, style, script,
      scope, functional, moduleIdentifier,
      createInjector, createInjectorSSR
    ) {
      var component = (typeof script === 'function' ? script.options : script) || {};

      // For security concerns, we use only base name in production mode.
      component.__file = "/home/frappe/frappe-bench/apps/csf_tz/csf_tz/public/js/jobcards/JobCards.vue";

      if (!component.render) {
        component.render = template.render;
        component.staticRenderFns = template.staticRenderFns;
        component._compiled = true;

        if (functional) { component.functional = true; }
      }

      component._scopeId = scope;

      {
        var hook;
        if (style) {
          hook = function(context) {
            style.call(this, createInjector(context));
          };
        }

        if (hook !== undefined) {
          if (component.functional) {
            // register for functional component in vue file
            var originalRender = component.render;
            component.render = function renderWithStyleInjection(h, context) {
              hook.call(context);
              return originalRender(h, context)
            };
          } else {
            // inject component registration as beforeCreate hook
            var existing = component.beforeCreate;
            component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
          }
        }
      }

      return component
    }
    /* style inject */
    function __vue_create_injector__() {
      var head = document.head || document.getElementsByTagName('head')[0];
      var styles = __vue_create_injector__.styles || (__vue_create_injector__.styles = {});
      var isOldIE =
        typeof navigator !== 'undefined' &&
        /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

      return function addStyle(id, css) {
        if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

        var group = isOldIE ? css.media || 'default' : id;
        var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

        if (!style.ids.includes(id)) {
          var code = css.source;
          var index = style.ids.length;

          style.ids.push(id);

          if (isOldIE) {
            style.element = style.element || document.querySelector('style[data-group=' + group + ']');
          }

          if (!style.element) {
            var el = style.element = document.createElement('style');
            el.type = 'text/css';

            if (css.media) { el.setAttribute('media', css.media); }
            if (isOldIE) {
              el.setAttribute('data-group', group);
              el.setAttribute('data-next-index', '0');
            }

            head.appendChild(el);
          }

          if (isOldIE) {
            index = parseInt(style.element.getAttribute('data-next-index'));
            style.element.setAttribute('data-next-index', index + 1);
          }

          if (style.element.styleSheet) {
            style.parts.push(code);
            style.element.styleSheet.cssText = style.parts
              .filter(Boolean)
              .join('\n');
          } else {
            var textNode = document.createTextNode(code);
            var nodes = style.element.childNodes;
            if (nodes[index]) { style.element.removeChild(nodes[index]); }
            if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
            else { style.element.appendChild(textNode); }
          }
        }
      }
    }
    /* style inject SSR */
    

    
    var Job_Cards = __vue_normalize__$1(
      { render: __vue_render__$1, staticRenderFns: __vue_staticRenderFns__$1 },
      __vue_inject_styles__$1,
      __vue_script__$1,
      __vue_scope_id__$1,
      __vue_is_functional_template__$1,
      __vue_module_identifier__$1,
      __vue_create_injector__,
      undefined
    );

  frappe.provide('frappe.JobCards');


  frappe.JobCards.job_cards = class {
          constructor(ref) {
          var parent = ref.parent;

                  this.$parent = $(parent);
                  this.page = parent.page;
                  this.make_body();
          }
          make_body() {
                  this.$EL = this.$parent.find('.layout-main');
                  this.vue = new Vue({
                          vuetify: new Vuetify(),
                          el: this.$EL[0],
                          data: {
                          },
                          render: function (h) { return h(Job_Cards); },
                  });
          }
          setup_header() {

          }
  };

}());
//# sourceMappingURL=jobcards.min.js.map
