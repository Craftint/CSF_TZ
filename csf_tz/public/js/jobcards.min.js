(function () {
  'use strict';

  var evntBus = new Vue();

  //
  var script = {
    data: function () { return ({
      Dialog: false,
      cardData: "",
      employees: "",
      completed_qty: 0,
      timer: {
        hours: "00",
        minutes: "00",
        seconds: "00",
        interval: "",
      },
    }); },
    watch: {
      Dialog: function Dialog(value) {
        if (value) {
          this.get_employees();
        } else {
          clearInterval(this.timer.interval);
        }
      },
    },
    methods: {
      close_dialog: function close_dialog() {
        this.Dialog = false;
      },
      start_job: function start_job() {
        var row = frappe.model.add_child(
          this.cardData,
          "Job Card Time Log",
          "time_logs"
        );
        row.from_time = frappe.datetime.now_datetime();
        row.name = "";
        row.completed_qty = 0;
        this.cardData.job_started = 1;
        this.cardData.started_time = row.from_time;
        this.cardData.status = "Work In Progress";
        if (!frappe.flags.resume_job) {
          this.cardData.current_time = 0;
        }
        this.set_timer();
        this.save();
      },
      start_por: function start_por() {
        if (!this.cardData.employee) {
          evntBus.$emit("show_messag", "Please set Employee");
        } else {
          this.start_job();
        }
      },
      resume_por: function resume_por() {
        frappe.flags.resume_job = 1;
        this.start_job();
      },
      pause_por: function pause_por() {
        if (
          this.cardData.for_quantity <
          this.cardData.total_completed_qty + flt(this.completed_qty)
        ) {
          evntBus.$emit(
            "show_messag",
            "The completed quantity cannot be greater than the required quantity"
          );
          return;
        }
        frappe.flags.pause_job = 1;
        this.cardData.status = "On Hold";
        clearInterval(this.timer.interval);
        this.complete_job();
      },
      get_employees: function get_employees() {
        var employees;
        frappe.call({
          method: "csf_tz.csf_tz.page.jobcards.jobcards.get_employees",
          args: { company: this.cardData.company },
          async: false,
          callback: function (r) {
            if (r.message) {
              employees = r.message;
            }
          },
        });
        this.employees = employees;
      },
      customFilter: function customFilter(item, queryText, itemText) {
        var searchText = queryText.toLowerCase();
        var textOne = item.name.toLowerCase();
        var textTwo = item.employee_name.toLowerCase();

        return (
          textOne.indexOf(searchText) > -1 || textTwo.indexOf(searchText) > -1
        );
      },
      set_timer: function set_timer() {
        if (this.cardData.status == "Completed") {
          return;
        }
        var vm = this;
        var currentIncrement = this.cardData.current_time || 0;
        if (this.cardData.started_time || this.cardData.current_time) {
          if (this.cardData.status == "On Hold") {
            updateStopwatch(currentIncrement);
            clearInterval(this.timer.interval);
          } else {
            currentIncrement += moment(frappe.datetime.now_datetime()).diff(
              moment(this.cardData.started_time),
              "seconds"
            );
            initialiseTimer();
          }

          function initialiseTimer() {
            vm.timer.interval = setInterval(function () {
              var current = setCurrentIncrement();
              updateStopwatch(current);
            }, 1000);
          }

          function updateStopwatch(increment) {
            var hours = Math.floor(increment / 3600);
            var minutes = Math.floor((increment - hours * 3600) / 60);
            var seconds = increment - hours * 3600 - minutes * 60;

            vm.timer.hours =
              hours < 10 ? "0" + hours.toString() : hours.toString();
            vm.timer.minutes =
              minutes < 10 ? "0" + minutes.toString() : minutes.toString();
            vm.timer.seconds =
              seconds < 10 ? "0" + seconds.toString() : seconds.toString();
          }

          function setCurrentIncrement() {
            currentIncrement += 1;
            return currentIncrement;
          }
        }
      },
      complete_job: function complete_job(completed_time) {
        var this$1 = this;

        var idx = this.cardData.time_logs.length - 1;
        this.cardData.time_logs[idx].completed_qty = flt(this.completed_qty);
        this.completed_qty = 0;
        this.cardData.time_logs.forEach(function (d) {
          if (d.from_time && !d.to_time) {
            d.to_time = completed_time || frappe.datetime.now_datetime();

            if (frappe.flags.pause_job) {
              var currentIncrement =
                moment(d.to_time).diff(moment(d.from_time), "seconds") || 0;
              this$1.cardData.current_time =
                currentIncrement + (this$1.cardData.current_time || 0);
            } else {
              this$1.cardData.started_time = "";
              this$1.cardData.job_started = 0;
              this$1.cardData.current_time = 0;
            }
            this$1.save();
          }
        });
      },
      submit_dialog: function submit_dialog() {
        this.cardData.status = "Completed";
        this.save("Submit");
        this.close_dialog();
      },
      save: function save(action) {
        if ( action === void 0 ) action = "Save";

        var vm = this;
        var doc = Object.assign({}, this.cardData);
        delete doc["operation"];
        frappe.call({
          method: "csf_tz.csf_tz.page.jobcards.jobcards.save_doc",
          args: {
            doc: doc,
            action: action,
          },
          async: false,
          callback: function (r) {
            if (r.message) {
              r.message.operation = vm.cardData.operation;
              Object.assign(vm.cardData, r.message);
            }
          },
        });
      },
    },
    created: function () {
      var this$1 = this;

      evntBus.$on("open_card", function (job_card) {
        this$1.Dialog = true;
        this$1.cardData = job_card;
        (this$1.timer = {
          hours: "00",
          minutes: "00",
          seconds: "00",
        }),
          this$1.set_timer();
      });
    },
  };

  /* script */
              var __vue_script__ = script;
              
  /* template */
  var __vue_render__ = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _vm.Dialog
      ? _c(
          "div",
          { attrs: { justify: "center" } },
          [
            _c(
              "v-dialog",
              {
                attrs: { "max-width": "900" },
                model: {
                  value: _vm.Dialog,
                  callback: function($$v) {
                    _vm.Dialog = $$v;
                  },
                  expression: "Dialog"
                }
              },
              [
                _c(
                  "v-card",
                  { staticClass: "px-3" },
                  [
                    _c(
                      "v-card-title",
                      { staticClass: "mt-2" },
                      [
                        _c("span", { staticClass: "headline indigo--text" }, [
                          _vm._v(_vm._s(_vm.cardData.operation.name))
                        ]),
                        _vm._v(" "),
                        _c("v-spacer"),
                        _vm._v(" "),
                        _c(
                          "div",
                          {
                            staticClass: "stopwatch",
                            staticStyle: {
                              "font-weight": "bold",
                              margin: "0px 13px 0px 2px",
                              color: "#545454",
                              "font-size": "18px",
                              display: "inline-block",
                              "vertical-align": "text-bottom"
                            }
                          },
                          [
                            _c("span", { staticClass: "hours" }, [
                              _vm._v(_vm._s(_vm.timer.hours))
                            ]),
                            _vm._v(" "),
                            _c("span", { staticClass: "colon" }, [_vm._v(":")]),
                            _vm._v(" "),
                            _c("span", { staticClass: "minutes" }, [
                              _vm._v(_vm._s(_vm.timer.minutes))
                            ]),
                            _vm._v(" "),
                            _c("span", { staticClass: "colon" }, [_vm._v(":")]),
                            _vm._v(" "),
                            _c("span", { staticClass: "seconds" }, [
                              _vm._v(_vm._s(_vm.timer.seconds))
                            ])
                          ]
                        ),
                        _vm._v(" "),
                        _c("v-spacer"),
                        _vm._v(" "),
                        _c("span", { staticClass: "overline" }, [
                          _vm._v(_vm._s(_vm.cardData.name))
                        ])
                      ],
                      1
                    ),
                    _vm._v(" "),
                    _c(
                      "v-row",
                      { staticClass: "mx-3" },
                      [
                        _c(
                          "v-col",
                          { attrs: { lg: "5", md: "5", cols: "12" } },
                          [
                            _c("v-img", {
                              staticClass: "img-border",
                              attrs: {
                                "max-height": "600",
                                "max-width": "600",
                                src:
                                  _vm.cardData.operation.image ||
                                  "/assets/csf_tz/js/jobcards/placeholder-image.png"
                              }
                            }),
                            _vm._v(" "),
                            _c(
                              "v-list-item-subtitle",
                              { staticClass: "subtitle-1 mb-1" },
                              [
                                _vm._v(
                                  "\n            Status: " +
                                    _vm._s(_vm.cardData.status) +
                                    "\n          "
                                )
                              ]
                            )
                          ],
                          1
                        ),
                        _vm._v(" "),
                        _c(
                          "v-col",
                          { attrs: { lg: "4", md: "4", cols: "12" } },
                          [
                            _c("v-textarea", {
                              attrs: {
                                label: "Operation Description",
                                "auto-grow": "",
                                outlined: "",
                                rows: "3",
                                "row-height": "25",
                                readonly: "",
                                "hide-details": ""
                              },
                              model: {
                                value: _vm.cardData.operation.description,
                                callback: function($$v) {
                                  _vm.$set(
                                    _vm.cardData.operation,
                                    "description",
                                    $$v
                                  );
                                },
                                expression: "cardData.operation.description"
                              }
                            })
                          ],
                          1
                        ),
                        _vm._v(" "),
                        _c(
                          "v-col",
                          { attrs: { lg: "3", md: "3", cols: "12" } },
                          [
                            _c(
                              "v-list-item-subtitle",
                              { staticClass: "subtitle-1 mb-1" },
                              [
                                _vm._v(
                                  "\n            Production Item: " +
                                    _vm._s(_vm.cardData.production_item) +
                                    "\n          "
                                )
                              ]
                            ),
                            _vm._v(" "),
                            _c("v-img", {
                              staticClass: "img-border",
                              attrs: {
                                "max-height": "400",
                                "max-width": "400",
                                src:
                                  _vm.cardData.work_order_image ||
                                  "/assets/csf_tz/js/jobcards/placeholder-image.png"
                              }
                            }),
                            _vm._v(" "),
                            _c("v-divider"),
                            _vm._v(" "),
                            _c("v-autocomplete", {
                              attrs: {
                                dense: "",
                                "auto-select-first": "",
                                outlined: "",
                                color: "indigo",
                                label: "Employee",
                                items: _vm.employees,
                                "item-text": "name",
                                "background-color": "white",
                                "no-data-text": "Customer not found",
                                "hide-details": "",
                                readonly: _vm.cardData.employee ? true : false,
                                filter: _vm.customFilter
                              },
                              scopedSlots: _vm._u(
                                [
                                  {
                                    key: "item",
                                    fn: function(data) {
                                      return [
                                        [
                                          _c(
                                            "v-list-item-content",
                                            [
                                              _c("v-list-item-title", {
                                                staticClass:
                                                  "indigo--text subtitle-1",
                                                domProps: {
                                                  innerHTML: _vm._s(
                                                    data.item.name
                                                  )
                                                }
                                              }),
                                              _vm._v(" "),
                                              _c("v-list-item-subtitle", {
                                                domProps: {
                                                  innerHTML: _vm._s(
                                                    "" + data.item.employee_name
                                                  )
                                                }
                                              })
                                            ],
                                            1
                                          )
                                        ]
                                      ]
                                    }
                                  }
                                ],
                                null,
                                false,
                                803306625
                              ),
                              model: {
                                value: _vm.cardData.employee,
                                callback: function($$v) {
                                  _vm.$set(_vm.cardData, "employee", $$v);
                                },
                                expression: "cardData.employee"
                              }
                            })
                          ],
                          1
                        )
                      ],
                      1
                    ),
                    _vm._v(" "),
                    _c(
                      "v-row",
                      { staticClass: "mx-3" },
                      [
                        _c(
                          "v-col",
                          { attrs: { lg: "9", md: "9", cols: "12" } },
                          [
                            _c("v-textarea", {
                              staticClass: "my-2",
                              attrs: {
                                label: "Remarks",
                                "auto-grow": "",
                                outlined: "",
                                rows: "2",
                                "row-height": "25",
                                "hide-details": ""
                              },
                              model: {
                                value: _vm.cardData.remarks,
                                callback: function($$v) {
                                  _vm.$set(_vm.cardData, "remarks", $$v);
                                },
                                expression: "cardData.remarks"
                              }
                            })
                          ],
                          1
                        ),
                        _vm._v(" "),
                        _c(
                          "v-col",
                          { attrs: { lg: "3", md: "3", cols: "12" } },
                          [
                            _c(
                              "v-list-item-subtitle",
                              { staticClass: "subtitle-1 mb-1" },
                              [
                                _vm._v(
                                  "\n            Qty To Manufacture: " +
                                    _vm._s(_vm.cardData.for_quantity) +
                                    "\n          "
                                )
                              ]
                            ),
                            _vm._v(" "),
                            _c(
                              "v-list-item-subtitle",
                              { staticClass: "subtitle-1 mb-1" },
                              [
                                _vm._v(
                                  "\n            Qty Completed: " +
                                    _vm._s(_vm.cardData.total_completed_qty) +
                                    "\n          "
                                )
                              ]
                            )
                          ],
                          1
                        )
                      ],
                      1
                    ),
                    _vm._v(" "),
                    _c(
                      "v-card-actions",
                      { staticClass: "mx-3" },
                      [
                        !_vm.cardData.job_started &&
                        _vm.cardData.total_completed_qty !=
                          _vm.cardData.for_quantity
                          ? _c(
                              "v-btn",
                              {
                                attrs: { color: "success", dark: "" },
                                on: { click: _vm.start_por }
                              },
                              [_vm._v("Start")]
                            )
                          : _vm._e(),
                        _vm._v(" "),
                        _vm.cardData.status == "On Hold" &&
                        _vm.cardData.total_completed_qty !=
                          _vm.cardData.for_quantity
                          ? _c(
                              "v-btn",
                              {
                                attrs: { color: "warning", dark: "" },
                                on: { click: _vm.resume_por }
                              },
                              [_vm._v("Resume")]
                            )
                          : _vm._e(),
                        _vm._v(" "),
                        _vm.cardData.status == "Work In Progress" &&
                        _vm.cardData.total_completed_qty !=
                          _vm.cardData.for_quantity
                          ? _c(
                              "v-btn",
                              {
                                attrs: { color: "warning", dark: "" },
                                on: { click: _vm.pause_por }
                              },
                              [_vm._v("Stop")]
                            )
                          : _vm._e(),
                        _vm._v(" "),
                        _c("v-spacer"),
                        _vm._v(" "),
                        _vm.cardData.status == "Work In Progress" &&
                        _vm.cardData.total_completed_qty !=
                          _vm.cardData.for_quantity
                          ? _c("v-text-field", {
                              attrs: {
                                outlined: "",
                                color: "indigo",
                                label: "Completed Qty",
                                "background-color": "white",
                                "hide-details": "",
                                type: "number",
                                dense: ""
                              },
                              model: {
                                value: _vm.completed_qty,
                                callback: function($$v) {
                                  _vm.completed_qty = $$v;
                                },
                                expression: "completed_qty"
                              }
                            })
                          : _vm._e(),
                        _vm._v(" "),
                        _c("v-spacer"),
                        _vm._v(" "),
                        _vm.cardData.total_completed_qty ==
                          _vm.cardData.for_quantity &&
                        _vm.cardData.status != "Completed"
                          ? _c(
                              "v-btn",
                              {
                                attrs: { color: "primary", dark: "" },
                                on: { click: _vm.submit_dialog }
                              },
                              [_vm._v("Submit")]
                            )
                          : _vm._e(),
                        _vm._v(" "),
                        _c(
                          "v-btn",
                          {
                            attrs: { color: "error", dark: "" },
                            on: { click: _vm.close_dialog }
                          },
                          [_vm._v("Close")]
                        )
                      ],
                      1
                    )
                  ],
                  1
                )
              ],
              1
            )
          ],
          1
        )
      : _vm._e()
  };
  var __vue_staticRenderFns__ = [];
  __vue_render__._withStripped = true;

    /* style */
    var __vue_inject_styles__ = function (inject) {
      if (!inject) { return }
      inject("data-v-70e280a1_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: {"version":3,"sources":[],"names":[],"mappings":"","file":"Card.vue"}, media: undefined });

    };
    /* scoped */
    var __vue_scope_id__ = undefined;
    /* module identifier */
    var __vue_module_identifier__ = undefined;
    /* functional template */
    var __vue_is_functional_template__ = false;
    /* component normalizer */
    function __vue_normalize__(
      template, style, script,
      scope, functional, moduleIdentifier,
      createInjector, createInjectorSSR
    ) {
      var component = (typeof script === 'function' ? script.options : script) || {};

      // For security concerns, we use only base name in production mode.
      component.__file = "/home/frappe/frappe-bench/apps/csf_tz/csf_tz/public/js/jobcards/Card.vue";

      if (!component.render) {
        component.render = template.render;
        component.staticRenderFns = template.staticRenderFns;
        component._compiled = true;

        if (functional) { component.functional = true; }
      }

      component._scopeId = scope;

      {
        var hook;
        if (style) {
          hook = function(context) {
            style.call(this, createInjector(context));
          };
        }

        if (hook !== undefined) {
          if (component.functional) {
            // register for functional component in vue file
            var originalRender = component.render;
            component.render = function renderWithStyleInjection(h, context) {
              hook.call(context);
              return originalRender(h, context)
            };
          } else {
            // inject component registration as beforeCreate hook
            var existing = component.beforeCreate;
            component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
          }
        }
      }

      return component
    }
    /* style inject */
    function __vue_create_injector__() {
      var head = document.head || document.getElementsByTagName('head')[0];
      var styles = __vue_create_injector__.styles || (__vue_create_injector__.styles = {});
      var isOldIE =
        typeof navigator !== 'undefined' &&
        /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

      return function addStyle(id, css) {
        if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

        var group = isOldIE ? css.media || 'default' : id;
        var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

        if (!style.ids.includes(id)) {
          var code = css.source;
          var index = style.ids.length;

          style.ids.push(id);

          if (isOldIE) {
            style.element = style.element || document.querySelector('style[data-group=' + group + ']');
          }

          if (!style.element) {
            var el = style.element = document.createElement('style');
            el.type = 'text/css';

            if (css.media) { el.setAttribute('media', css.media); }
            if (isOldIE) {
              el.setAttribute('data-group', group);
              el.setAttribute('data-next-index', '0');
            }

            head.appendChild(el);
          }

          if (isOldIE) {
            index = parseInt(style.element.getAttribute('data-next-index'));
            style.element.setAttribute('data-next-index', index + 1);
          }

          if (style.element.styleSheet) {
            style.parts.push(code);
            style.element.styleSheet.cssText = style.parts
              .filter(Boolean)
              .join('\n');
          } else {
            var textNode = document.createTextNode(code);
            var nodes = style.element.childNodes;
            if (nodes[index]) { style.element.removeChild(nodes[index]); }
            if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
            else { style.element.appendChild(textNode); }
          }
        }
      }
    }
    /* style inject SSR */
    

    
    var Card = __vue_normalize__(
      { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
      __vue_inject_styles__,
      __vue_script__,
      __vue_scope_id__,
      __vue_is_functional_template__,
      __vue_module_identifier__,
      __vue_create_injector__,
      undefined
    );

  //

  var script$1 = {
    data: function () {
      return {
        data: "",
      };
    },
    components: {
      Card: Card,
    },

    methods: {
      get_data: function get_data() {
        var vm = this;
        frappe.call({
          method: "csf_tz.csf_tz.page.jobcards.jobcards.get_job_cards",
          args: {},
          async: true,
          callback: function (r) {
            if (r.message) {
              vm.data = r.message;
            }
          },
        });
      },
      get_current: function get_current(increment) {
        var hours = Math.floor(increment / 3600);
        var minutes = Math.floor((increment - hours * 3600) / 60);
        var seconds = increment - hours * 3600 - minutes * 60;
        return {
        hours :
          hours < 10 ? "0" + hours.toString() : hours.toString(),
        minutes :
          minutes < 10 ? "0" + minutes.toString() : minutes.toString(),
        seconds :
          seconds < 10 ? "0" + seconds.toString() : seconds.toString(),
          }
      },
      open_card: function open_card(item) {
        evntBus.$emit("open_card", item);
      },
      set_status_color: function set_status_color(status) {
        if (status == "Open") {
          return "status-Open";
        }
        if (status == "Work In Progress") {
          return "status-Work";
        }
        if (status == "Material Transferred") {
          return "status-Material";
        }
        if (status == "On Hold") {
          return "status-Hold";
        }
        if (status == "Submitted") {
          return "status-Submitted";
        }
      },
    },
    created: function () {
      this.get_data();
      evntBus.$on("show_messag", function (msg) {
        frappe.msgprint(msg);
      });
    },
  };

  /* script */
              var __vue_script__$1 = script$1;
              
  /* template */
  var __vue_render__$1 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("v-app", [
      _c(
        "div",
        { attrs: { fluid: "" } },
        [
          _c("H3", [_vm._v(" Working Job Cards")]),
          _vm._v(" "),
          _c("Card"),
          _vm._v(" "),
          _vm._l(_vm.data, function(item) {
            return _c("div", { key: item.name }, [
              _c(
                "div",
                { class: _vm.set_status_color(item.status) },
                [
                  _c(
                    "v-card",
                    { staticClass: "mb-4" },
                    [
                      _c(
                        "v-list-item",
                        { attrs: { "three-line": "" } },
                        [
                          _c(
                            "v-row",
                            [
                              _c(
                                "v-col",
                                { attrs: { lg: "9", md: "9", cols: "12" } },
                                [
                                  _c(
                                    "v-list-item-content",
                                    [
                                      _c(
                                        "div",
                                        { staticClass: "overline mb-4" },
                                        [_vm._v(_vm._s(item.name))]
                                      ),
                                      _vm._v(" "),
                                      _c(
                                        "v-list-item-title",
                                        { staticClass: "headline mb-2" },
                                        [
                                          _vm._v(
                                            "\n                " +
                                              _vm._s(item.operation.name) +
                                              "\n              "
                                          )
                                        ]
                                      ),
                                      _vm._v(" "),
                                      _c(
                                        "v-list-item-subtitle",
                                        { staticClass: "mb-1" },
                                        [
                                          _vm._v(
                                            "\n                Qty To Manufacture: " +
                                              _vm._s(item.for_quantity) +
                                              "\n              "
                                          )
                                        ]
                                      ),
                                      _vm._v(" "),
                                      _c(
                                        "v-list-item-subtitle",
                                        { staticClass: "mb-1" },
                                        [
                                          _vm._v(
                                            "\n                Total Completed Qty: " +
                                              _vm._s(item.total_completed_qty) +
                                              "\n              "
                                          )
                                        ]
                                      ),
                                      _vm._v(" "),
                                      _c(
                                        "v-list-item-subtitle",
                                        { staticClass: "mb-1" },
                                        [
                                          _vm._v(
                                            "\n                Production Item: " +
                                              _vm._s(item.production_item) +
                                              "\n              "
                                          )
                                        ]
                                      ),
                                      _vm._v(" "),
                                      _c(
                                        "v-list-item-subtitle",
                                        { staticClass: "mb-1" },
                                        [
                                          _vm._v(
                                            "\n                Satus: " +
                                              _vm._s(item.status) +
                                              "\n              "
                                          )
                                        ]
                                      ),
                                      _vm._v(" "),
                                      item.current_time
                                        ? _c("v-card-subtitle", [
                                            _vm._v(
                                              "\n                Current Time: \n                "
                                            ),
                                            _c("span", { staticClass: "hours" }, [
                                              _vm._v(
                                                _vm._s(
                                                  _vm.get_current(
                                                    item.current_time
                                                  ).hours
                                                )
                                              )
                                            ]),
                                            _vm._v(" "),
                                            _c("span", { staticClass: "colon" }, [
                                              _vm._v(":")
                                            ]),
                                            _vm._v(" "),
                                            _c(
                                              "span",
                                              { staticClass: "minutes" },
                                              [
                                                _vm._v(
                                                  _vm._s(
                                                    _vm.get_current(
                                                      item.current_time
                                                    ).minutes
                                                  )
                                                )
                                              ]
                                            ),
                                            _vm._v(" "),
                                            _c("span", { staticClass: "colon" }, [
                                              _vm._v(":")
                                            ]),
                                            _vm._v(" "),
                                            _c(
                                              "span",
                                              { staticClass: "seconds" },
                                              [
                                                _vm._v(
                                                  _vm._s(
                                                    _vm.get_current(
                                                      item.current_time
                                                    ).seconds
                                                  )
                                                )
                                              ]
                                            )
                                          ])
                                        : _vm._e()
                                    ],
                                    1
                                  )
                                ],
                                1
                              ),
                              _vm._v(" "),
                              _c(
                                "v-col",
                                { attrs: { lg: "3", md: "3", cols: "12" } },
                                [
                                  _c("v-img", {
                                    staticClass: "img-border mt-5",
                                    attrs: {
                                      "max-height": "150",
                                      "max-width": "250",
                                      src:
                                        item.operation.image ||
                                        "/assets/csf_tz/js/jobcards/placeholder-image.png"
                                    }
                                  })
                                ],
                                1
                              )
                            ],
                            1
                          )
                        ],
                        1
                      ),
                      _vm._v(" "),
                      _c(
                        "v-card-actions",
                        [
                          _c(
                            "v-btn",
                            {
                              attrs: { text: "", color: "primary" },
                              on: {
                                click: function($event) {
                                  return _vm.open_card(item)
                                }
                              }
                            },
                            [_vm._v("\n              open\n            ")]
                          )
                        ],
                        1
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ])
          })
        ],
        2
      )
    ])
  };
  var __vue_staticRenderFns__$1 = [];
  __vue_render__$1._withStripped = true;

    /* style */
    var __vue_inject_styles__$1 = function (inject) {
      if (!inject) { return }
      inject("data-v-641198f6_0", { source: "\n.navbar-default {\n  height: 40px;\n}\ndiv.navbar .container {\n  padding-top: 2px;\n}\n.status-Open {\n  border-left: 5px solid purple;\n}\n.status-Work {\n  border-left: 5px solid lime;\n}\n.status-Material {\n  border-left: 5px solid teal;\n}\n.status-Hold {\n  border-left: 5px solid #607d8b;\n}\n.status-Submitted {\n  border-left: 5px solid #ff5722;\n}\n.img-border {\n  border: 1px solid #BDBDBD;\n}\n", map: {"version":3,"sources":["/home/frappe/frappe-bench/apps/csf_tz/csf_tz/public/js/jobcards/JobCards.vue"],"names":[],"mappings":";AAuIA;EACA,YAAA;AACA;AACA;EACA,gBAAA;AACA;AACA;EACA,6BAAA;AACA;AACA;EACA,2BAAA;AACA;AACA;EACA,2BAAA;AACA;AACA;EACA,8BAAA;AACA;AACA;EACA,8BAAA;AACA;AACA;EACA,yBAAA;AACA","file":"JobCards.vue","sourcesContent":["<template>\n  <v-app>\n    <div fluid>\n      <H3> Working Job Cards</H3>\n      <Card></Card>\n      <div v-for=\"item in data\" :key=\"item.name\">\n        <div :class=\"set_status_color(item.status)\">\n          <v-card class=\"mb-4\">\n            <v-list-item three-line>\n              <v-row>\n                <v-col lg=\"9\" md=\"9\" cols=\"12\">\n              <v-list-item-content>\n                <div class=\"overline mb-4\">{{ item.name }}</div>\n                <v-list-item-title class=\"headline mb-2\">\n                  {{ item.operation.name }}\n                </v-list-item-title>\n                <v-list-item-subtitle class=\"mb-1\">\n                  Qty To Manufacture: {{ item.for_quantity }}\n                </v-list-item-subtitle>\n                <v-list-item-subtitle class=\"mb-1\">\n                  Total Completed Qty: {{ item.total_completed_qty }}\n                </v-list-item-subtitle>\n                <v-list-item-subtitle class=\"mb-1\">\n                  Production Item: {{ item.production_item }}\n                </v-list-item-subtitle>\n                <v-list-item-subtitle class=\"mb-1\">\n                  Satus: {{ item.status }}\n                </v-list-item-subtitle>\n                <v-card-subtitle v-if=\"item.current_time\">\n                  Current Time: \n                  <span class=\"hours\">{{ get_current(item.current_time).hours }}</span>\n                  <span class=\"colon\">:</span>\n                  <span class=\"minutes\">{{ get_current(item.current_time).minutes }}</span>\n                  <span class=\"colon\">:</span>\n                  <span class=\"seconds\">{{ get_current(item.current_time).seconds }}</span>\n                  </v-card-subtitle>\n              </v-list-item-content>\n              </v-col>\n              <v-col lg=\"3\" md=\"3\" cols=\"12\">\n              <v-img\n                max-height=\"150\"\n                max-width=\"250\"\n                class=\"img-border mt-5\"\n                :src=\"\n                  item.operation.image ||\n                  '/assets/csf_tz/js/jobcards/placeholder-image.png'\n                \"\n              ></v-img>\n              </v-col>\n            </v-row>\n            </v-list-item>\n            <v-card-actions>\n              <!-- <v-spacer></v-spacer> -->\n              <v-btn text color=\"primary\" @click=\"open_card(item)\">\n                open\n              </v-btn>\n            </v-card-actions>\n          </v-card>\n        </div>\n      </div>\n    </div>\n  </v-app>\n</template>\n\n<script>\nimport { evntBus } from \"./bus\";\nimport Card from \"./Card.vue\";\n\nexport default {\n  data: function () {\n    return {\n      data: \"\",\n    };\n  },\n  components: {\n    Card,\n  },\n\n  methods: {\n    get_data() {\n      const vm = this;\n      frappe.call({\n        method: \"csf_tz.csf_tz.page.jobcards.jobcards.get_job_cards\",\n        args: {},\n        async: true,\n        callback: function (r) {\n          if (r.message) {\n            vm.data = r.message;\n          }\n        },\n      });\n    },\n    get_current(increment) {\n      const hours = Math.floor(increment / 3600);\n      const minutes = Math.floor((increment - hours * 3600) / 60);\n      const seconds = increment - hours * 3600 - minutes * 60;\n      return {\n      hours :\n        hours < 10 ? \"0\" + hours.toString() : hours.toString(),\n      minutes :\n        minutes < 10 ? \"0\" + minutes.toString() : minutes.toString(),\n      seconds :\n        seconds < 10 ? \"0\" + seconds.toString() : seconds.toString(),\n        }\n    },\n    open_card(item) {\n      evntBus.$emit(\"open_card\", item);\n    },\n    set_status_color(status) {\n      if (status == \"Open\") {\n        return \"status-Open\";\n      }\n      if (status == \"Work In Progress\") {\n        return \"status-Work\";\n      }\n      if (status == \"Material Transferred\") {\n        return \"status-Material\";\n      }\n      if (status == \"On Hold\") {\n        return \"status-Hold\";\n      }\n      if (status == \"Submitted\") {\n        return \"status-Submitted\";\n      }\n    },\n  },\n  created: function () {\n    this.get_data();\n    evntBus.$on(\"show_messag\", (msg) => {\n      frappe.msgprint(msg);\n    });\n  },\n};\n</script>\n<style>\n.navbar-default {\n  height: 40px;\n}\ndiv.navbar .container {\n  padding-top: 2px;\n}\n.status-Open {\n  border-left: 5px solid purple;\n}\n.status-Work {\n  border-left: 5px solid lime;\n}\n.status-Material {\n  border-left: 5px solid teal;\n}\n.status-Hold {\n  border-left: 5px solid #607d8b;\n}\n.status-Submitted {\n  border-left: 5px solid #ff5722;\n}\n.img-border {\n  border: 1px solid #BDBDBD;\n}\n</style>"]}, media: undefined });

    };
    /* scoped */
    var __vue_scope_id__$1 = undefined;
    /* module identifier */
    var __vue_module_identifier__$1 = undefined;
    /* functional template */
    var __vue_is_functional_template__$1 = false;
    /* component normalizer */
    function __vue_normalize__$1(
      template, style, script,
      scope, functional, moduleIdentifier,
      createInjector, createInjectorSSR
    ) {
      var component = (typeof script === 'function' ? script.options : script) || {};

      // For security concerns, we use only base name in production mode.
      component.__file = "/home/frappe/frappe-bench/apps/csf_tz/csf_tz/public/js/jobcards/JobCards.vue";

      if (!component.render) {
        component.render = template.render;
        component.staticRenderFns = template.staticRenderFns;
        component._compiled = true;

        if (functional) { component.functional = true; }
      }

      component._scopeId = scope;

      {
        var hook;
        if (style) {
          hook = function(context) {
            style.call(this, createInjector(context));
          };
        }

        if (hook !== undefined) {
          if (component.functional) {
            // register for functional component in vue file
            var originalRender = component.render;
            component.render = function renderWithStyleInjection(h, context) {
              hook.call(context);
              return originalRender(h, context)
            };
          } else {
            // inject component registration as beforeCreate hook
            var existing = component.beforeCreate;
            component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
          }
        }
      }

      return component
    }
    /* style inject */
    function __vue_create_injector__$1() {
      var head = document.head || document.getElementsByTagName('head')[0];
      var styles = __vue_create_injector__$1.styles || (__vue_create_injector__$1.styles = {});
      var isOldIE =
        typeof navigator !== 'undefined' &&
        /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

      return function addStyle(id, css) {
        if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

        var group = isOldIE ? css.media || 'default' : id;
        var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

        if (!style.ids.includes(id)) {
          var code = css.source;
          var index = style.ids.length;

          style.ids.push(id);

          if (isOldIE) {
            style.element = style.element || document.querySelector('style[data-group=' + group + ']');
          }

          if (!style.element) {
            var el = style.element = document.createElement('style');
            el.type = 'text/css';

            if (css.media) { el.setAttribute('media', css.media); }
            if (isOldIE) {
              el.setAttribute('data-group', group);
              el.setAttribute('data-next-index', '0');
            }

            head.appendChild(el);
          }

          if (isOldIE) {
            index = parseInt(style.element.getAttribute('data-next-index'));
            style.element.setAttribute('data-next-index', index + 1);
          }

          if (style.element.styleSheet) {
            style.parts.push(code);
            style.element.styleSheet.cssText = style.parts
              .filter(Boolean)
              .join('\n');
          } else {
            var textNode = document.createTextNode(code);
            var nodes = style.element.childNodes;
            if (nodes[index]) { style.element.removeChild(nodes[index]); }
            if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
            else { style.element.appendChild(textNode); }
          }
        }
      }
    }
    /* style inject SSR */
    

    
    var Job_Cards = __vue_normalize__$1(
      { render: __vue_render__$1, staticRenderFns: __vue_staticRenderFns__$1 },
      __vue_inject_styles__$1,
      __vue_script__$1,
      __vue_scope_id__$1,
      __vue_is_functional_template__$1,
      __vue_module_identifier__$1,
      __vue_create_injector__$1,
      undefined
    );

  frappe.provide('frappe.JobCards');


  frappe.JobCards.job_cards = class {
          constructor(ref) {
          var parent = ref.parent;

                  this.$parent = $(parent);
                  this.page = parent.page;
                  this.make_body();
          }
          make_body() {
                  this.$EL = this.$parent.find('.layout-main');
                  this.vue = new Vue({
                          vuetify: new Vuetify(),
                          el: this.$EL[0],
                          data: {
                          },
                          render: function (h) { return h(Job_Cards); },
                  });
          }
          setup_header() {

          }
  };

}());
//# sourceMappingURL=jobcards.min.js.map
